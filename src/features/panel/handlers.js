const {
    ActionRowBuilder, ButtonBuilder, ButtonStyle,
    StringSelectMenuBuilder, ModalBuilder, TextInputBuilder, TextInputStyle
} = require('discord.js');

const { week1Command } = require('../../commands/week1');
const { manageCommand } = require('../../commands/manage');
const { historyCommand } = require('../../commands/history');

const { makePromptEmbed, makeErrorEmbed, makeSuccessEmbed } = require('../../utils/embeds');
const { hasBroadcasterPerm } = require('../../utils/roles');
const { listDays, setPartTime, addOrUpdateDay, removeDay } = require('../../tribunes/scheduleTimes');

// –∫–æ—Ä–Ω–µ–≤–∞—è –ø–∞–Ω–µ–ª—å (–∫–Ω–æ–ø–∫–∏ week1/manage/history/config)
function makePanelRoot() {
    return [
        new ActionRowBuilder().addComponents(
            new ButtonBuilder().setCustomId('panel|week').setLabel('üìÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–µ–¥–µ–ª—é (—Ç–∏–ø 1)').setStyle(ButtonStyle.Primary),
            new ButtonBuilder().setCustomId('panel|manage').setLabel('üõ† Manage').setStyle(ButtonStyle.Secondary),
            new ButtonBuilder().setCustomId('panel|history').setLabel('üìú History').setStyle(ButtonStyle.Secondary),
            new ButtonBuilder().setCustomId('panel|config').setLabel('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏').setStyle(ButtonStyle.Success),
        ),
    ];
}

function makeConfigRoot() {
    return [
        new ActionRowBuilder().addComponents(
            new ButtonBuilder().setCustomId('config|set-time').setLabel('üïí –ó–∞–¥–∞—Ç—å –≤—Ä–µ–º—è —á–∞—Å—Ç–∏').setStyle(ButtonStyle.Primary),
            new ButtonBuilder().setCustomId('config|add-day').setLabel('‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å').setStyle(ButtonStyle.Success),
            new ButtonBuilder().setCustomId('config|remove-day').setLabel('üóë –£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å').setStyle(ButtonStyle.Danger),
        ),
    ];
}

function makeDaySelect(customId, placeholder) {
    const days = listDays(); // —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –¥–Ω–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
    const opts = days.length ? days.map(d => ({ label: d, value: d })) : [{ label: '–ù–µ—Ç –¥–Ω–µ–π', value: 'none' }];
    return new ActionRowBuilder().addComponents(
        new StringSelectMenuBuilder()
            .setCustomId(customId)
            .setPlaceholder(placeholder)
            .setMinValues(1).setMaxValues(1)
            .addOptions(opts.slice(0,25))
    );
}

function makePartButtons(prefix, day) {
    return [
        new ActionRowBuilder().addComponents(
            new ButtonBuilder().setCustomId(`${prefix}|${day}|1`).setLabel('–ß–∞—Å—Ç—å 1').setStyle(ButtonStyle.Secondary),
            new ButtonBuilder().setCustomId(`${prefix}|${day}|2`).setLabel('–ß–∞—Å—Ç—å 2').setStyle(ButtonStyle.Secondary),
        ),
    ];
}

function makeTimeModal(day, part) {
    const modal = new ModalBuilder().setCustomId(`config_time_modal|${day}|${part}`).setTitle(`–í—Ä–µ–º—è: ${day} —á.${part}`);
    modal.addComponents(
        new ActionRowBuilder().addComponents(
            new TextInputBuilder().setCustomId('time').setLabel('–í—Ä–µ–º—è (HH:MM)').setStyle(TextInputStyle.Short).setRequired(true)
        )
    );
    return modal;
}

function makeAddDayModal() {
    const modal = new ModalBuilder().setCustomId('config_add_day_modal').setTitle('–î–æ–±–∞–≤–∏—Ç—å –¥–µ–Ω—å');
    modal.addComponents(
        new ActionRowBuilder().addComponents(
            new TextInputBuilder().setCustomId('day').setLabel('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏ (–Ω–∞–ø—Ä. –ß–µ—Ç–≤–µ—Ä–≥)').setStyle(TextInputStyle.Short).setRequired(true)
        ),
        new ActionRowBuilder().addComponents(
            new TextInputBuilder().setCustomId('name').setLabel('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç—Ä–∏–±—É–Ω—ã').setStyle(TextInputStyle.Short).setRequired(true)
        ),
        new ActionRowBuilder().addComponents(
            new TextInputBuilder().setCustomId('p1').setLabel('–í—Ä–µ–º—è 1-–π —á–∞—Å—Ç–∏ (HH:MM)').setStyle(TextInputStyle.Short).setRequired(true)
        ),
        new ActionRowBuilder().addComponents(
            new TextInputBuilder().setCustomId('p2').setLabel('–í—Ä–µ–º—è 2-–π —á–∞—Å—Ç–∏ (HH:MM)').setStyle(TextInputStyle.Short).setRequired(true)
        ),
    );
    return modal;
}

// –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–Ω—è –ø–∞–Ω–µ–ª–∏
async function handlePanelButtons(interaction, openRoot = false) {
    const [prefix, action, a2, a3] = (interaction.customId || 'panel|root').split('|');

    if (openRoot) {
        // –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –¥–ª—è –ø–∞–Ω–µ–ª–∏
        const member = await interaction.guild.members.fetch(interaction.user.id);
        if (!hasBroadcasterPerm(member)) {
            return interaction.reply({ embeds: [makeErrorEmbed('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è Broadcaster.')], flags: 64 });
        }
        return interaction.reply({ embeds: [makePromptEmbed('–ü–∞–Ω–µ–ª—å', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:')], components: makePanelRoot(), flags: 64 });
    }

    if (prefix === 'panel') {
        if (action === 'week') return week1Command(interaction);
        if (action === 'manage') return manageCommand(interaction);
        if (action === 'history') return historyCommand(interaction);
        if (action === 'config') {
            const member = await interaction.guild.members.fetch(interaction.user.id);
            if (!hasBroadcasterPerm(member)) {
                return interaction.reply({ embeds: [makeErrorEmbed('‚ùå –¢–æ–ª—å–∫–æ –¥–ª—è Broadcaster.')], flags: 64 });
            }
            return interaction.reply({ embeds: [makePromptEmbed('–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è', '–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:')], components: makeConfigRoot(), flags: 64 });
        }
    }

    if (prefix === 'config') {
        if (action === 'set-time') {
            return interaction.reply({
                embeds: [makePromptEmbed('–í—Ä–µ–º—è —á–∞—Å—Ç–∏', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:')],
                components: [makeDaySelect('cfg_day_for_time', '–î–µ–Ω—å')],
                flags: 64
            });
        }
        if (action === 'add-day') {
            return interaction.showModal(makeAddDayModal());
        }
        if (action === 'remove-day') {
            return interaction.reply({
                embeds: [makePromptEmbed('–£–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å', '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:')],
                components: [makeDaySelect('cfg_day_for_remove', '–î–µ–Ω—å')],
                flags: 64
            });
        }
    }

    // –∫–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–∏ –¥–ª—è set-time
    if (prefix === 'cfg' && action === 'settime') {
        const day = a2;
        const part = a3;
        return interaction.showModal(makeTimeModal(day, part));
    }

    return false;
}

async function handlePanelSelects(interaction) {
    if (interaction.customId === 'cfg_day_for_time') {
        const day = interaction.values[0];
        if (day === 'none') return interaction.reply({ embeds: [makeErrorEmbed('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π.')], flags: 64 });
        return interaction.reply({
            embeds: [makePromptEmbed('–í—Ä–µ–º—è —á–∞—Å—Ç–∏', `–î–µ–Ω—å: **${day}**\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—å:`)],
            components: [
                new ActionRowBuilder().addComponents(
                    new ButtonBuilder().setCustomId(`cfg|settime|${day}|1`).setLabel('–ß–∞—Å—Ç—å 1').setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder().setCustomId(`cfg|settime|${day}|2`).setLabel('–ß–∞—Å—Ç—å 2').setStyle(ButtonStyle.Secondary),
                ),
            ],
            flags: 64
        });
    }

    if (interaction.customId === 'cfg_day_for_remove') {
        const day = interaction.values[0];
        if (day === 'none') return interaction.reply({ embeds: [makeErrorEmbed('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π.')], flags: 64 });
        try {
            removeDay(day);
            return interaction.reply({ embeds: [makeSuccessEmbed(`‚úÖ –î–µ–Ω—å **${day}** —É–¥–∞–ª—ë–Ω –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.`)], flags: 64 });
        } catch (e) {
            return interaction.reply({ embeds: [makeErrorEmbed('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –¥–µ–Ω—å.')], flags: 64 });
        }
    }

    return false;
}

async function handlePanelModals(interaction) {
    if (interaction.customId.startsWith('config_time_modal|')) {
        const [, day, part] = interaction.customId.split('|');
        const time = interaction.fields.getTextInputValue('time').trim();
        try {
            setPartTime(day, part, time);
            return interaction.reply({ embeds: [makeSuccessEmbed(`‚úÖ –í—Ä–µ–º—è –¥–ª—è **${day}**, —á.${part}: **${time}**`)], flags: 64 });
        } catch {
            return interaction.reply({ embeds: [makeErrorEmbed('‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –§–æ—Ä–º–∞—Ç HH:MM.')], flags: 64 });
        }
    }

    if (interaction.customId === 'config_add_day_modal') {
        const day  = interaction.fields.getTextInputValue('day').trim();
        const name = interaction.fields.getTextInputValue('name').trim();
        const p1   = interaction.fields.getTextInputValue('p1').trim();
        const p2   = interaction.fields.getTextInputValue('p2').trim();
        try {
            addOrUpdateDay(day, { '1': p1, '2': p2 }, name);
            return interaction.reply({ embeds: [makeSuccessEmbed(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω **${day}** ‚Äî ¬´${name}¬ª: —á1 ${p1}, —á2 ${p2}`)], flags: 64 });
        } catch {
            return interaction.reply({ embeds: [makeErrorEmbed('‚ùå –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ. –§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ HH:MM.')], flags: 64 });
        }
    }

    return false;
}

module.exports = {
    handlePanelButtons,
    handlePanelSelects,
    handlePanelModals,
};
