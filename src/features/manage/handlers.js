const { makePromptEmbed, makeSuccessEmbed, makeErrorEmbed } = require('../../utils/embeds');
const { loadData, saveData } = require('../../services/dataStore');
const { updateMainMessage } = require('../../handlers/updateMessage');
const { hasBroadcasterPerm, hasGenderRole } = require('../../utils/roles');
const { ActionRowBuilder, ButtonBuilder, ButtonStyle, StringSelectMenuBuilder, UserSelectMenuBuilder } = require('discord.js');
const { ComponentType } = require('discord.js');

function createDayButtonsFromData(data, prefix) {
    const days = Object.keys(data);
    if (!days.length) return [];
    const btns = days.map(d => new ButtonBuilder().setCustomId(`${prefix}_day|${d}`).setLabel(d).setStyle(ButtonStyle.Secondary));
    const rows = [];
    for (let i = 0; i < btns.length; i += 5) rows.push(new ActionRowBuilder().addComponents(btns.slice(i, i + 5)));
    return rows;
}
function createPartButtonsManage(prefix, day) {
    const btns = ['1','2'].map(p =>
        new ButtonBuilder()
            .setCustomId(`${prefix}_part|${day}|${p}`)
            .setLabel(`${p} —á–∞—Å—Ç—å`)
            .setStyle(ButtonStyle.Secondary)
    );
    return [new ActionRowBuilder().addComponents(btns)];
}
function createRoleButtonsManage(prefix, day, part) {
    const btns = ['–≤–µ–¥—É—â–∏–π','–∑–∞–º–µ–Ω–∞'].map(role => new ButtonBuilder().setCustomId(`${prefix}_role|${day}|${part}|${role}`).setLabel(role).setStyle(role==='–≤–µ–¥—É—â–∏–π'?ButtonStyle.Success:ButtonStyle.Primary));
    return [new ActionRowBuilder().addComponents(btns)];
}
function makeRegisteredUsersSelect(data, day, part, role, customId) {
    const users = data?.[day]?.parts?.[part]?.[role] || [];
    if (!users.length) return null;
    return new ActionRowBuilder().addComponents(
        new StringSelectMenuBuilder().setCustomId(customId).setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞')
            .addOptions(users.slice(0,25).map(uid => ({ label: `ID:${uid}`.slice(0,25), value: uid })))
    );
}

async function slashManage(interaction) {
    const member = await interaction.guild.members.fetch(interaction.user.id);
    if (!hasBroadcasterPerm(member)) {
        return interaction.reply({ embeds: [makeErrorEmbed('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏.')], flags: 64 });
    }
    const row = new ActionRowBuilder().addComponents(
        new ButtonBuilder().setCustomId('manage_start|remove').setLabel('üóë –£–¥–∞–ª–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞').setStyle(ButtonStyle.Danger),
        new ButtonBuilder().setCustomId('manage_start|add').setLabel('‚ûï –ó–∞–ø–∏—Å–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞').setStyle(ButtonStyle.Success)
    );
    return interaction.reply({ embeds: [makePromptEmbed('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–±—É–Ω–∞–º–∏', '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:')], components: [row], flags: 64 });
}

/* –Ω–∏–∂–µ ‚Äî –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫/—Å–µ–ª–µ–∫—Ç–æ–≤ manage (–≤–∑—è—Ç—ã –∏–∑ —Ç–≤–æ–µ–≥–æ —Ñ–∞–π–ª–∞, –±–µ–∑ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π) */
async function handleManageButtons(interaction) {
    const [step, value] = interaction.customId.split('|');

    if (step === 'manage_start') {
        const mode = value;
        const data = loadData();
        const rows = createDayButtonsFromData(data, `manage_${mode}`);
        if (!rows.length) return interaction.reply({ embeds: [makeErrorEmbed('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–Ω–µ–π.')], flags: 64 });
        return interaction.reply({ embeds: [makePromptEmbed('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∏–±—É–Ω–∞–º–∏', `–†–µ–∂–∏–º: **${mode==='remove'?'–£–¥–∞–ª–µ–Ω–∏–µ':'–ó–∞–ø–∏—Å—å'}**\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å:`)], components: rows, flags: 64 });
    }
    if (step === 'manage_remove_day') {
        const selectedDay = value;
        return interaction.reply({ embeds: [makePromptEmbed('–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞', `–î–µ–Ω—å: **${selectedDay}**\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—å:`)], components: createPartButtonsManage('manage_remove', selectedDay), flags: 64 });
    }
    if (step === 'manage_remove_part') {
        const [_, day, part] = interaction.customId.split('|');
        return interaction.reply({ embeds: [makePromptEmbed('–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞', `–î–µ–Ω—å: **${day}**, —á–∞—Å—Ç—å: **${part}**\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:`)], components: createRoleButtonsManage('manage_remove', day, part), flags: 64 });
    }
    if (step === 'manage_remove_role') {
        const [_, day, part, role] = interaction.customId.split('|');
        const data = loadData();
        const sel = makeRegisteredUsersSelect(data, day, part, role, `manage_remove_pick|${day}|${part}|${role}`);
        if (!sel) return interaction.reply({ embeds: [makeErrorEmbed('‚ùå –í —ç—Ç–æ–π –ø–æ–∑–∏—Ü–∏–∏ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.')], flags: 64 });
        return interaction.reply({ embeds: [makePromptEmbed('–£–¥–∞–ª–µ–Ω–∏–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞', `–í—ã–±–µ—Ä–∏—Ç–µ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è\n${day}, —á.${part}, ${role}`)], components: [sel], flags: 64 });
    }

    if (step === 'manage_add_day') {
        const selectedDay = value;
        return interaction.reply({ embeds: [makePromptEmbed('–ó–∞–ø–∏—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–∞', `–î–µ–Ω—å: **${selectedDay}**\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Å—Ç—å:`)], components: createPartButtonsManage('manage_add', selectedDay), flags: 64 });
    }
    if (step === 'manage_add_part') {
        const [_, day, part] = interaction.customId.split('|');
        return interaction.reply({ embeds: [makePromptEmbed('–ó–∞–ø–∏—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–∞', `–î–µ–Ω—å: **${day}**, —á–∞—Å—Ç—å: **${part}**\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:`)], components: createRoleButtonsManage('manage_add', day, part), flags: 64 });
    }
    if (step === 'manage_add_role') {
        const { UserSelectMenuBuilder } = require('discord.js');
        const [_, day, part, role] = interaction.customId.split('|');
        const picker = new ActionRowBuilder().addComponents(new UserSelectMenuBuilder().setCustomId(`manage_add_pick|${day}|${part}|${role}`).setPlaceholder('–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è').setMaxValues(1).setMinValues(1));
        return interaction.reply({ embeds: [makePromptEmbed('–ó–∞–ø–∏—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–∞', `–î–µ–Ω—å: **${day}**, —á–∞—Å—Ç—å: **${part}**, —Ä–æ–ª—å: **${role}**\n–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:`)], components: [picker], flags: 64 });
    }

    if (step === 'manage' && value === 'open') {
        // legacy –≤–µ—Ç–∫–∞ ‚Äî –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–∞–∫ –µ—Å—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å
        return interaction.reply({ content: 'Legacy –ø–∞–Ω–µ–ª—å —Å–∫—Ä—ã—Ç–∞ –≤ –º–æ–¥—É–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏.', flags: 64 });
    }

    return false;
}

async function handleManageSelects(interaction) {
    // remove pick
    if (interaction.customId.startsWith('manage_remove_pick')) {
        const [_, day, part, role] = interaction.customId.split('|');
        const pickedUserId = interaction.values[0];
        const { appendHistory } = require('../../services/historyStore');
        const data = loadData();
        if (!data?.[day]?.parts?.[part]?.[role]) return interaction.reply({ embeds: [makeErrorEmbed('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.')], flags: 64 });
        data[day].parts[part][role] = data[day].parts[part][role].filter(id => id !== pickedUserId);
        saveData(data);
        await require('../../handlers/updateMessage').updateMainMessage(interaction.client);
        appendHistory({ action: 'remove', actorId: interaction.user.id, targetId: pickedUserId, day, part, role });
        return interaction.reply({ embeds: [makeSuccessEmbed(`‚úÖ –£–¥–∞–ª—ë–Ω <@${pickedUserId}> –∏–∑ ${day}, —á.${part}, ${role}.`)], flags: 64 });
    }

    // main list (legacy)
    if (interaction.customId === 'manage_select') {
        const [day, part, role, userId] = interaction.values[0].split('|');
        const row = new ActionRowBuilder().addComponents(
            new ButtonBuilder().setCustomId(`manage_action|move|${day}|${part}|${role}|${userId}`).setLabel('üì¶ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏').setStyle(ButtonStyle.Primary),
            new ButtonBuilder().setCustomId(`manage_action|remove|${day}|${part}|${role}|${userId}`).setLabel('üóë –£–¥–∞–ª–∏—Ç—å').setStyle(ButtonStyle.Danger)
        );
        return interaction.reply({ content: `–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è <@${userId}> ‚Äî ${day}, —á–∞—Å—Ç—å ${part}, —Ä–æ–ª—å: ${role}`, components: [row] });
    }

    // add pick (user select)
    // add pick (user select) ‚Äî —Ñ–∏–∫—Å ¬´–û—à–∏–±–∫–∞ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è¬ª
    if (
        interaction.componentType === ComponentType.UserSelect &&
        interaction.customId.startsWith('manage_add_pick')
    ) {
        await interaction.deferReply({ flags: 64 }); // –¥–∞—ë–º –±–æ—Ç—É –±–æ–ª—å—à–µ 3 —Å–µ–∫.

        const [_, day, part, role] = interaction.customId.split('|');
        const pickedUserId = interaction.values[0];
        const data = loadData();

        if (!data[day]) data[day] = { parts: { '1': { –≤–µ–¥—É—â–∏–π: [], –∑–∞–º–µ–Ω–∞: [] }, '2': { –≤–µ–¥—É—â–∏–π: [], –∑–∞–º–µ–Ω–∞: [] }, '3': { –≤–µ–¥—É—â–∏–π: [], –∑–∞–º–µ–Ω–∞: [] } } };
        if (!data[day].parts[part]) data[day].parts[part] = { –≤–µ–¥—É—â–∏–π: [], –∑–∞–º–µ–Ω–∞: [] };
        if (!Array.isArray(data[day].parts[part][role])) data[day].parts[part][role] = [];

        const already = data[day].parts[part][role];
        const maxSlots = role === '–≤–µ–¥—É—â–∏–π' ? 2 : 3;

        if (already.includes(pickedUserId)) {
            return interaction.editReply({ embeds: [makeErrorEmbed('‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞–ø–∏—Å–∞–Ω –Ω–∞ —ç—Ç—É –ø–æ–∑–∏—Ü–∏—é.')] });
        }
        if (already.length >= maxSlots) {
            return interaction.editReply({ embeds: [makeErrorEmbed('‚ùå –ú–µ—Å—Ç–∞ –∑–∞–Ω—è—Ç—ã.')] });
        }

        const member = await interaction.guild.members.fetch(pickedUserId).catch(() => null);
        if (!member) {
            return interaction.editReply({ embeds: [makeErrorEmbed('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞.')] });
        }

        const isMale = hasGenderRole(member, '–º—É–∂—Å–∫–∞—è');
        const isFemale = hasGenderRole(member, '–∂–µ–Ω—Å–∫–∞—è');
        if (!isMale && !isFemale) {
            return interaction.editReply({ embeds: [makeErrorEmbed('‚ùå –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–æ–ª—å —Å ¬´–º—É–∂—Å–∫–∞—è¬ª –∏–ª–∏ ¬´–∂–µ–Ω—Å–∫–∞—è¬ª.')] });
        }

        if (role === '–≤–µ–¥—É—â–∏–π') {
            const currentMembers = already
                .map(id => interaction.guild.members.cache.get(id))
                .filter(Boolean);
            const hasMale = currentMembers.some(m => hasGenderRole(m, '–º—É–∂—Å–∫–∞—è'));
            const hasFemale = currentMembers.some(m => hasGenderRole(m, '–∂–µ–Ω—Å–∫–∞—è'));
            if ((hasMale && isMale) || (hasFemale && isFemale)) {
                return interaction.editReply({ embeds: [makeErrorEmbed('‚ùå –ù–∞ –≤–µ–¥—É—â–µ–≥–æ –Ω–µ–ª—å–∑—è –¥–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞ —Ç–æ–≥–æ –∂–µ –ø–æ–ª–∞, –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π.')] });
            }
        }

        already.push(pickedUserId);
        saveData(data);
        await updateMainMessage(interaction.client);

        const { appendHistory } = require('../../services/historyStore');
        appendHistory({ action: 'register', actorId: interaction.user.id, targetId: pickedUserId, day, part, role });

        const { createUnregisterButton } = require('../../handlers/unregisterBtn');
        const unregisterBtn = createUnregisterButton(day, part, role, pickedUserId);

        return interaction.editReply({
            embeds: [makeSuccessEmbed(`‚úÖ –î–æ–±–∞–≤–ª–µ–Ω <@${pickedUserId}> –≤ ${day}, —á.${part}, ${role}.`)],
            components: unregisterBtn
        });
    }


    return false;
}

module.exports = { slashManage, handleManageButtons, handleManageSelects };
